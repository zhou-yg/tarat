import { inputComputeInServer, prisma, state, writePrisma } from "tarat-core";

export interface Folder {
  id?: number;
  name: string;
  rm: boolean;
  items: FolderItem[];
}

export interface FolderItem {
  id?: number;
  name: string;
  folderId?: number;
}

const INITIAL_FOLDER_NAME = "新建文件夹";
const INITIAL_ITEM_NAME = "新建文件";

function cascading() {
  const folders = prisma<Folder[]>("folder", () => ({}));

  const currentFolderId = state<number>();

  const folderName = state(INITIAL_FOLDER_NAME);

  const createOrUpdateFolers = writePrisma(folders, () => ({
    name: folderName(),
  }));

  const removeFolders = writePrisma(folders, () => ({
    rm: true,
  }));

  const createFolder = inputComputeInServer(function* () {
    yield createOrUpdateFolers.create();
    folderName(() => INITIAL_FOLDER_NAME);
  });

  const updateFolder = inputComputeInServer(function* () {
    yield createOrUpdateFolers.update(currentFolderId());
    folderName(() => INITIAL_FOLDER_NAME);
  });

  const removeFolder = inputComputeInServer(function* () {
    yield removeFolders.remove(currentFolderId());
    currentFolderId(() => folders()[0]?.id);
  });

  const items = prisma<FolderItem[]>("item", () => {
    const fid = currentFolderId();
    if (fid) {
      return {
        where: {
          folderId: fid,
        },
      };
    }
  });

  const currentItemId = state<number>();

  const itemName = state(INITIAL_ITEM_NAME);

  const writeItems = writePrisma(items, () => ({
    folder: {
      connect: {
        id: currentFolderId(),
      },
    },
    name: itemName(),
  }));

  const createItem = inputComputeInServer(function* () {
    yield writeItems.create();
    folderName(() => INITIAL_ITEM_NAME);
  });

  const updateItem = inputComputeInServer(function* () {
    yield writeItems.update(currentItemId());
    folderName(() => INITIAL_ITEM_NAME);
  });

  const removeItem = inputComputeInServer(function* () {
    yield writeItems.remove(currentItemId());
    currentFolderId(() => folders()[0]?.id);
  });

  return {
    // folder
    folders,
    currentFolderId,
    createFolder,
    updateFolder,
    removeFolder,
    // item
    items,
    itemName,
    createItem,
    updateItem,
    removeItem,
  };
}

export default cascading;

/**. auto generated by tarat */
const autoParser = {
  cascading: {
    names: [
      [0, "folders"],
      [1, "currentFolderId"],
      [2, "folderName"],
      [3, "createOrUpdateFolers"],
      [4, "removeFolders"],
      [5, "createFolder"],
      [6, "updateFolder"],
      [7, "removeFolder"],
      [8, "items"],
      [9, "currentItemId"],
      [10, "itemName"],
      [11, "writeItems"],
      [12, "createItem"],
      [13, "updateItem"],
      [14, "removeItem"],
    ],
    deps: [
      ["h", 3, [0, 2], [0, 2]],
      ["h", 4, [0], [0]],
      ["h", 5, [3], [2]],
      ["h", 6, [1], [3, 2]],
      ["h", 7, [1, 0], [4, 1]],
      ["h", 8, [1]],
      ["h", 11, [8, 1, 10], [8, 1, 10]],
      ["h", 12, [11], [2]],
      ["h", 13, [9], [11, 2]],
      ["h", 14, [9, 0], [11, 1]],
    ],
  },
};
Object.assign(cascading, {
  __deps__: autoParser.cascading.deps,
  __names__: autoParser.cascading.names,
  __name__: "cascading",
});
/** auto generated by tarat .*/
